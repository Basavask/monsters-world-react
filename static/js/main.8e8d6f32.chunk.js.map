{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","handleThree","console","log","state","handleTwo","handleOne","bind","fetch","then","response","json","data","this","filteredMonsters","filter","item","toLowerCase","includes","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAGaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACxB,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,YCJZC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMI,QAAQK,KAAI,SAACL,GAAD,OACjB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLdK,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+DDG,EAnEf,kDACE,aAAe,IAAD,8BACZ,gBAiBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,gBAnBnC,EA2BdC,YAAc,WACZC,QAAQC,IAAI,aAzBZ,EAAKC,MAAQ,CACXpB,QAAS,GACTc,YAAa,IAIf,EAAKO,UAAY,EAAKC,UAAUC,KAAf,gBATL,EADhB,qDAaE,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKf,SAAS,CAAEb,QAAS4B,SAhB/C,uBAyBE,WACEV,QAAQC,IAAI,YA1BhB,oBAgCE,WAAU,IAAD,EAC0BU,KAAKT,MAA9BN,EADD,EACCA,YACFgB,EAFC,EACc9B,QACY+B,QAAO,SAACC,GACvC,OAAOA,EAAK9B,KAAK+B,cAAcC,SAASpB,MAG1C,OACE,sBAAKjB,UAAU,MAAf,UAUE,+CACA,cAAC,EAAD,CACEU,YAAY,iBACZC,aAAcqB,KAAKrB,eAErB,cAAC,EAAD,CAAUR,QAAS8B,IAEnB,gCACE,wBAAQK,QAASN,KAAKP,YAAtB,iBACA,wBAAQa,QAASN,KAAKP,UAAtB,oBACA,wBAAQa,QAASN,KAAKR,UAAtB,iBACA,wBAAQc,QAASN,KAAKZ,YAAtB,6BA5DV,GAAyBmB,aCOVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8e8d6f32.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n      <h2>{props.monster.name}</h2>\r\n      <h3>{props.monster.email}</h3>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./card-list.style.css\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monster.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"../search-box/search-box.style.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nexport class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monster: [],\n      searchField: \"\",\n    };\n\n    // this.handleChange = this.handleChange.bind(this); // this is for to bind the method with this keyword without an arrow fn\n    this.handleTwo = this.handleOne.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((data) => this.setState({ monster: data }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value }, () => {\n      // console.log(\"after...\", this.state.searchField); // to get the callback\n    });\n  };\n\n  handleOne() {\n    console.log(\"am one\");\n  }\n  handleThree = () => {\n    console.log(\"am three\");\n  };\n\n  render() {\n    const { searchField, monster } = this.state;\n    const filteredMonsters = monster.filter((item) => {\n      return item.name.toLowerCase().includes(searchField);\n    });\n\n    return (\n      <div className=\"App\">\n        {/* <input\n          type=\"search\"\n          placeholder=\"search monster\"\n          onChange={(e) => {\n            this.setState({ searchField: e.target.value }, () => {\n              console.log(\"after...\", this.state.searchField); // to get the callback\n            });\n          }}\n        /> */}\n        <h1>MONTERS WORLD</h1>\n        <SearchBox\n          placeholder=\"search monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monster={filteredMonsters}></CardList>\n\n        <div>\n          <button onClick={this.handleOne()}>One</button>\n          <button onClick={this.handleOne}>OneOne</button>\n          <button onClick={this.handleTwo}>Two</button>\n          <button onClick={this.handleThree}>Three</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}